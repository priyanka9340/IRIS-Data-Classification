# -*- coding: utf-8 -*-
"""IRIS DATA SET.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Kz8Zl_UoVv74tABGbYYMX9v1VjPgR1tZ
"""

from google .colab import drive
drive.mount('/content/drive')

"""***
## IMPORTING THE NECESSITY LIBRARY
***
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""***
## IMPORTING THE DATA FRAME
***
"""

data=pd.read_csv('/content/drive/MyDrive/Iris_data_sample.csv',index_col=['Unnamed: 0'],na_values=['??','??','###'])
data

col=data.columns

"""***
## UNIQUE VALUES
***
"""

for i in col:
    print('-'*100)
    print(f"The column {i}\n{data[i].unique()}")

data.isnull().sum()

"""***
##**Filling the Missing Value**
***
"""

data['SepalLengthCm'].mean()

data['SepalLengthCm'].median()

data['SepalLengthCm']=data['SepalLengthCm'].fillna(round(data['SepalLengthCm'].mean(),1))

data['SepalWidthCm'].mean()

data['SepalWidthCm'].median()

data['SepalWidthCm']=data['SepalWidthCm'].fillna(round(data['SepalWidthCm'].median(), 1))

data['PetalLengthCm'].unique()

data['PetalLengthCm'].mean()

data['PetalLengthCm'].median()

data['PetalLengthCm']=data['PetalLengthCm'].fillna(round(data['PetalLengthCm'].median(), 1))

data['Species'].unique()

data['Species'].mode()

data['Species'].value_counts().plot(kind='bar', color=['r','b','g'])

data['Species'].unique()[0]

data['Species']=data['Species'].fillna(data['Species'].unique()[0])

data.isnull().sum()

df=data.copy()

df.isnull().sum()

df['Species']=df['Species'].map({'Iris-setosa':0,'Iris-versicolor':1,'Iris-virginica':2})

x=df.drop('Species',axis=1).values
y=df['Species'].values

x[:5]

y[:5]

"""***
##**Splitting the Fearture and Target**
***
"""

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)

print(x_train.shape)
print(x_test.shape)
print(y_train.shape)
print(y_test.shape)

"""***
##**Feature Scaling**
***
"""

from sklearn.preprocessing import StandardScaler

sc=StandardScaler()

x_train=sc.fit_transform(x_train)
x_test=sc.transform(x_test)

"""***
##**Dimensionality Reduction**
***

from sklearn.decomposition import KernelPCA
kpca = KernelPCA(n_components=2, kernel='linear')
x_train = kpca.fit_transform(x_train)
x_test = kpca.transform(x_test)

from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
kpca = LDA(n_components=1)
x_train = kpca.fit_transform(x_train, y_train)
x_test = kpca.transform(x_test)

***
## Building a model
***
"""

from sklearn.linear_model import LogisticRegression

lr=LogisticRegression(class_weight='balanced',random_state=0)

lr.fit(x_train,y_train)

"""***
##Making Prediction
***
"""

y_pred=lr.predict(x_test)
y_pred

"""***
##Confusion Matrix
***
"""

from sklearn.metrics import ConfusionMatrixDisplay as cmd

cmd.from_predictions(y_test,y_pred,display_labels=['Iris-setosa','Iris-versicolor','Iris-virginica'],
                     cmap='GnBu');

"""***
##**Training And Testing Accuracy**
***
"""

from sklearn.metrics import accuracy_score,classification_report

accuracy_score(y_test,y_pred)

accuracy_score(y_train,lr.predict(x_train))

print(classification_report(y_test,y_pred))

"""***
## KNN MODEL
***
"""

x1=df.drop('Species',axis=1).values
y1=df['Species'].values

x_train1,x_test1,y_train1,y_test1=train_test_split(x1,y1,test_size=0.20,random_state=0)

sc_1=StandardScaler()

x_train1=sc_1.fit_transform(x_train1)
x_test1=sc_1.transform(x_test1)

from sklearn.neighbors import KNeighborsClassifier

ref=KNeighborsClassifier(n_neighbors=5,p=2,metric='minkowski')

ref.fit(x_train1,y_train1)

y_pred_1=ref.predict(x_test1)
y_pred_1

cmd.from_predictions(y_test1,y_pred_1,display_labels=['Iris-setosa','Iris-versicolor','Iris-virginica'],
                     cmap='GnBu')

accuracy_score(y_test1,y_pred_1)

accuracy_score(y_train,lr.predict(x_train))

from mlxtend.plotting import plot_decision_regions

'''plot_decision_regions(x_train,y_train,
                      clf=ref,
                      markers=['h', 'P'],
                      legend=True)
plt.xlabel('KernalPCA1')
plt.ylabel('KernalPCA2')
plt.title('Training Set Decision Region (KNN)')
plt.show();'''

'''plot_decision_regions(x_test,y_test,
                      clf=ref,
                      markers=['h', 'P'],
                      legend=True)
plt.xlabel('KernalPCA1')
plt.ylabel('KernalPCA2')
plt.title('Testing Set Decision Region (logistic regression)')
plt.show();'''

"""***

